; This sourcecode published under the Terms of the General Public License.
; Written by Eric Esser, Wissenschaftszentrum Berlin, eric.esser@wzb.eu.
; Inspired by uib gmbh (www.uib.de), Thomas Besser (KIT), Detlef Krummel (GEI) and Tobias Friede (Fraunhofer)

[Actions]
;==========================================================================================================
; Includes
include_insert "%ScriptPath%\common.opsiinc"
include_insert "%ScriptPath%\lib\insert_uninstall_by_registry_dotnet.opsiinc"

;==========================================================================================================
; Variables 
DefVar $CustomPostDeinstall$
DefVar $UninstallSearchString$
DefVar $RemoveOlderVersions$
DefStringList $Uninstallstrings$ 

Set $RemoveOlderVersions$   = getProductProperty("remove-older-versions","true")

Set $UninstallSearchString$ = "Microsoft .NET Framework 4.7"

Set $Uninstallstrings$ = addtolist($Uninstallstrings$, "%ScriptPath%\" + $SetupFileDeutsch$)
Set $Uninstallstrings$ = addtolist($Uninstallstrings$, "%ScriptPath%\" + $SetupFile$)
DefStringList $UninstallMSIIDsStatic$

include_insert "%ScriptPath%\insert_msi_id_list.opsiinc"
;==========================================================================================================
; Program logic
comment "Show product picture"
ShowBitmap "%ScriptPath%\" + $ProductId$ + ".png" $PrettyName$

; Uninstall actual version
comment "Uninstalling " + $ProductId$ + "..."
message "Uninstalling " + $ProductId$ + " ..."
for %Uninstallstring% in $Uninstallstrings$ do Sub_uninstall_actual_version

; Sub function in section_uninstall_by_registry.opsiinc - variable set in commons.opsiinc
sub_uninstall_by_registry

if ($RemoveOlderVersions$ = "true")
  comment "Uninstalling older versions of .NET Framework ..."
  message "Uninstalling older versions of .NET Framework ..."
  for %msiid% in $UninstallMSIIDsStatic$ do sub_uninstall_older_versions
  Set $UninstallSearchString$  = strpart($UninstallSearchString$, "1", "27")
  sub_uninstall_older_versions_by_registry
endif

; Include post deinstall file in custom folder via OPSI property 
comment "include custom post deinstall file"
set $CustomPostDeinstall$ = getProductProperty("custom-post-deinstall","none")
if not ($CustomPostDeinstall$ = "none")
	if FileExists("%ScriptPath%\custom\" + $CustomPostDeinstall$)
		include_insert "%ScriptPath%\custom\" + $CustomPostDeinstall$
	endif
endif


;==========================================================================================================
; Functions

[Sub_uninstall_actual_version]
Set $Uninstallstring$ = "%Uninstallstring%"
Winbatch_uninstall_actual_version
Sub_check_exitcode

[Winbatch_uninstall_actual_version]
$Uninstallstring$ /uninstall /passive /norestart /log "$LogDir$\$ProductId$.uninstall_log.txt"

[sub_uninstall_older_versions]

if not (GetRegistryStringValueSysnative("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\%msiid%] DisplayName") = "")
	Winbatch_uninstall
	; Check exitcode for MSI (instead of MS exe installer with reduced list of exit codes)
	if stringToBool(isMsiExitcodeFatal(getLastExitCode, "True", $ErrorString$))
		isFatalError
	endif
endif

[Winbatch_uninstall]
msiexec /x %msiid% /qb!

[sub_uninstall_older_versions_by_registry]
sub_uninstall_by_registry



[Sub_check_exitcode]
Set $ExitCode$ = getLastExitCode
if stringToBool(isMsExitcodeFatal_short($ExitCode$, "True", $ErrorString$))
;if stringToBool(isMsExitcodeFatal(getLastExitCod, "True", $ErrorString$))
	isFatalError
endif


