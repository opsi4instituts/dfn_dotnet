; This sourcecode published under the Terms of the General Public License.
; Written by Eric Esser, Wissenschaftszentrum Berlin, eric.esser@wzb.eu.
; Inspired by uib gmbh (www.uib.de), Thomas Besser (KIT), Detlef Krummel (GEI) and Tobias Friede (Fraunhofer)

[Actions]
;==========================================================================================================
; Includes
include_insert "%ScriptPath%\common.opsiinc"

;==========================================================================================================
; Variables 


DefVar $CustomPostInstall$
DefVar $SetupString$
DefVar $SetupStringCommand$
DefVar $SetupStringDeutsch$

DefVar $Setup_prepatch_x64$
DefVar $Setup_prepatch_x86$

DefVar $InstalledDotNetVersion$
DefVar $InstallationRequired$
DefVar $RequiredDotNetVersion$
DefStringList $DotNetVersionParts$

;==========================================================================================================
; Program logic

comment "Show product picture"
ShowBitmap "%ScriptPath%\" + $ProductId$ + ".png" $PrettyName$ + " " + $Version$
Message "Installing " + $ProductId$ + " ..."

if not(HasMinimumSpace ("%SystemDrive%", $MinimumSpace$))
	LogError "Not enough space on %SystemDrive%, " + $MinimumSpace$ + " on drive %SystemDrive% needed for " + $ProductId$
	isFatalError "Not enought space on %SystemDrive%"
	; Stop process and set installation status to failed
endif

;patch
if (CompareDotSeparatedNumbers(GetMsVersionInfo, "6.1") = "0")
	comment "We are on NT5"
	if FileExists ("%System%\D3DCompiler_47.dll")
		comment "KB4019990 already installed"
	else
		Set $Setup_prepatch_x64$ = "Windows6.1-KB4019990-x64.msu"
		Set $Setup_prepatch_x86$ = stringReplace($Setup_prepatch_x64$, "x64", "x86")
		comment "we must install KB4019990"
		message "we must install KB4019990"
		if ($INST_SystemType$ = "64 Bit System") 
			Set $SetupString$ = "%ScriptPath%" + "\" + $Setup_prepatch_x64$
		else
			Set $SetupString$ = "%ScriptPath%" + "\" + $Setup_prepatch_x86$
		endif
		Set $SetupStringCommand$ = "/quiet /norestart"
		comment "we do install KB4019990"
		message "we do install KB4019990"
		ChangeDirectory "%SCRIPTPATH%"
		Winbatch_install
	endif
endif

;==========================================================================================================

Set $SetupString$         = "%ScriptPath%" + "\" + $SetupFile$
Set $SetupStringCommand$  = " /passive /norestart /log " + '"' + $LogDir$ + "\" + $ProductId$ + ".install_log.txt" + '"'
Set $SetupStringDeutsch$  = "%ScriptPath%" + "\" +  $SetupFileDeutsch$

if ($MSVersion$ = "10.0")
	; Windows 10 installs .net updates as system updates. There are never ever any msi records in the registry.
	Set $InstalledDotNetVersion$ = GetRegistryStringValue64("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full] Version")
	Sub_convert_version
	Set $InstallationRequired$ = boolToString(not($InstalledDotNetVersion$ = $RequiredDotNetVersion$))
else
	Set $InstallationRequired$ = boolToString((GetRegistryStringValue64("["+$ActVersionRegPath$+"] DisplayName") = ""))
endif
if ((stringToBool($InstallationRequired$)) or (getProductProperty("forcereinstall","False") = "True"))
	if FileExists($SetupString$)
		comment "Start setup program"
		ChangeDirectory "%SCRIPTPATH%"
		Winbatch_install
		Sub_check_exitcode
		ExitWindows /Reboot
	else
		LogError "No setup file found, please check the OPSI package"
		isFatalError "No Setup file found"
	endif
else
	comment $PrettyName$ + " " + $Version$ + " already installed. No forced reinstall selected, thus skipping installation"
	message $PrettyName$ + " " + $Version$ + " already installed. No forced reinstall selected, thus skipping installation"
endif

if ($MSVersion$ = "10.0")
	Set $InstalledDotNetVersion$ = GetRegistryStringValue64("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full\1031] Version")
	Set $InstallationRequired$ = boolToString(not($InstalledDotNetVersion$ = $RequiredDotNetVersion$))
else
	Set $InstallationRequired$ = boolToString((GetRegistryStringValue64("["+$ActVersionRegPathDeutsch$+"] DisplayName") = ""))
endif
if ((stringToBool($InstallationRequired$)) or (getProductProperty("forcereinstall","False") = "True"))
	if ((getProductProperty("german-language-pack","auto") = "True") or ((getProductProperty("german-language-pack","auto") = "auto") and ($system_language$ = "0407") ) )
		Set $SetupString$ = $SetupStringDeutsch$
		Set $SetupStringCommand$ = stringReplace($SetupStringCommand$, $ProductId$, $ProductId$ + "_ger_lp")
		if FileExists($SetupString$)
			comment "Installing German language pack"
			message "Installing German language pack"
			ChangeDirectory "%SCRIPTPATH%"
			Winbatch_install
			Sub_check_exitcode
			ExitWindows /Reboot
		else
			LogError "No German language pack file found, please check the OPSI package"
			isFatalError "No German language pack file found"
		endif
	endif
else
	comment $PrettyName$ + " " + $Version$ + " German language pack already installed. No forced reinstall selected, thus skipping installation"
	message $PrettyName$ + " " + $Version$ + " German language pack already installed. No forced reinstall selected, thus skipping installation"
endif

comment "include custom post install file"
set $CustomPostInstall$ = getProductProperty("custom-post-install","none")
if not ($CustomPostInstall$ = "none")
	if FileExists("%ScriptPath%\custom\" + $CustomPostInstall$)
		include_insert "%ScriptPath%\custom\" + $CustomPostInstall$
	endif
endif

[Winbatch_install]
$SetupString$ $SetupStringCommand$

[Sub_check_exitcode]
Set $ExitCode$ = getLastExitCode
if stringToBool(isMsExitcodeFatal_short($ExitCode$, "True", $ErrorString$))
;if stringToBool(isMsExitcodeFatal(getLastExitCod, "True", $ErrorString$))
	isFatalError
endif

[Sub_convert_version]
Set $DotNetVersionParts$ = splitString($Version$, ".")
if (count($DotNetVersionParts$) INT>= "3")
	set $DotNetVersionParts$ = getsublist(0 : 2, $DotNetVersionParts$)
	Set $RequiredDotNetVersion$ = takeString(2, $DotNetVersionParts$)
	if (strLength($RequiredDotNetVersion$) INT< "5")
		Set $RequiredDotNetVersion$ = "0" + $RequiredDotNetVersion$
	endif
	set $DotNetVersionParts$ = setStringInListAtIndex($RequiredDotNetVersion$, $DotNetVersionParts$, "2")
	set $RequiredDotNetVersion$ = composestring($DotNetVersionParts$, ".")
endif
